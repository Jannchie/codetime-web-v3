// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from '@hey-api/client-fetch'
import type { V3BeAnyUserData, V3BeAnyUserError, V3CountUserMinutesData, V3CountUserMinutesError, V3CountUserMinutesResponse, V3GetRootData, V3GetRootResponse, V3GetTotalMinutesData, V3GetTotalMinutesResponse, V3GetUserByUserIdData, V3GetUserByUserIdError, V3GetUserByUserIdResponse, V3GetUserSelfData, V3GetUserSelfResponse, V3GetUserShieldData, V3GetUserShieldError, V3GetUserShieldResponse, V3GetYearlyReportDataData, V3GetYearlyReportDataError, V3GetYearlyReportDataResponse, V3GithubAuthData, V3GithubAuthError, V3GithubAuthResponse, V3GoogleAuthData, V3GoogleAuthError, V3GoogleAuthResponse, V3ListAggregatedLogData, V3ListAggregatedLogError, V3ListAggregatedLogResponse, V3ListRealtimeLogsData, V3ListRealtimeLogsError, V3ListRealtimeLogsResponse, V3ListSelfLatestLogsData, V3ListSelfLatestLogsError, V3ListSelfLatestLogsResponse, V3ListSelfMinutesData, V3ListSelfMinutesError, V3ListSelfMinutesResponse, V3ListSelfTopData, V3ListSelfTopError, V3ListSelfTopResponse, V3ListTopLanguagesData, V3ListTopLanguagesError, V3ListTopLanguagesResponse, V3ListTopWorkspacesData, V3ListTopWorkspacesError, V3ListTopWorkspacesResponse } from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Root endpoint
 * Root endpoint handler.
 */
export function v3GetRoot<ThrowOnError extends boolean = false>(options?: Options<V3GetRootData, ThrowOnError>) {
  return (options?.client ?? _heyApiClient).get<V3GetRootResponse, unknown, ThrowOnError>({
    url: '/v3',
    ...options,
  })
}

/**
 * Total minutes endpoint
 * Total minutes endpoint handler.
 */
export function v3GetTotalMinutes<ThrowOnError extends boolean = false>(options?: Options<V3GetTotalMinutesData, ThrowOnError>) {
  return (options?.client ?? _heyApiClient).get<V3GetTotalMinutesResponse, unknown, ThrowOnError>({
    url: '/v3/total-minutes',
    ...options,
  })
}

/**
 * GitHub OAuth login
 * Handle GitHub OAuth authentication flow.
 *
 * This endpoint exchanges a GitHub authorization code for user information
 * and either creates a new user or logs in an existing user.
 */
export function v3GithubAuth<ThrowOnError extends boolean = false>(options: Options<V3GithubAuthData, ThrowOnError>) {
  return (options.client ?? _heyApiClient).post<V3GithubAuthResponse, V3GithubAuthError, ThrowOnError>({
    url: '/v3/auth/github',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Google OAuth login
 * Handle Google OAuth authentication flow.
 *
 * This endpoint exchanges a Google authorization code for user information
 * and either creates a new user or logs in an existing user.
 */
export function v3GoogleAuth<ThrowOnError extends boolean = false>(options: Options<V3GoogleAuthData, ThrowOnError>) {
  return (options.client ?? _heyApiClient).post<V3GoogleAuthResponse, V3GoogleAuthError, ThrowOnError>({
    url: '/v3/auth/google',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * CountUserMinutes
 * Count the total minutes for a user, with optional meta filter.
 */
export function v3CountUserMinutes<ThrowOnError extends boolean = false>(options?: Options<V3CountUserMinutesData, ThrowOnError>) {
  return (options?.client ?? _heyApiClient).get<V3CountUserMinutesResponse, V3CountUserMinutesError, ThrowOnError>({
    url: '/v3/users/self/workspaces',
    ...options,
  })
}

/**
 * GetUserByUserId
 */
export function v3GetUserByUserId<ThrowOnError extends boolean = false>(options: Options<V3GetUserByUserIdData, ThrowOnError>) {
  return (options.client ?? _heyApiClient).get<V3GetUserByUserIdResponse, V3GetUserByUserIdError, ThrowOnError>({
    url: '/v3/users/{user_id}',
    ...options,
  })
}

/**
 * GetUserSelf
 */
export function v3GetUserSelf<ThrowOnError extends boolean = false>(options?: Options<V3GetUserSelfData, ThrowOnError>) {
  return (options?.client ?? _heyApiClient).get<V3GetUserSelfResponse, unknown, ThrowOnError>({
    url: '/v3/users/self',
    ...options,
  })
}

/**
 * GetUserShield
 * Get a shield with user's coding time information.
 *
 * Args:
 * session: The database session.
 * uid: The user ID.
 * minutes: Optional time range in minutes to filter by.
 * project: Optional project name to filter by.
 * language: Optional language to filter by. If provided, only statistics for this language will be counted.
 *
 * Returns:
 * A ShieldResponse object with badge data.
 */
export function v3GetUserShield<ThrowOnError extends boolean = false>(options: Options<V3GetUserShieldData, ThrowOnError>) {
  return (options.client ?? _heyApiClient).get<V3GetUserShieldResponse, V3GetUserShieldError, ThrowOnError>({
    url: '/v3/users/shield',
    ...options,
  })
}

/**
 * ListSelfLatestLogs
 */
export function v3ListSelfLatestLogs<ThrowOnError extends boolean = false>(options?: Options<V3ListSelfLatestLogsData, ThrowOnError>) {
  return (options?.client ?? _heyApiClient).get<V3ListSelfLatestLogsResponse, V3ListSelfLatestLogsError, ThrowOnError>({
    url: '/v3/users/self/latest-logs',
    ...options,
  })
}

/**
 * ListSelfMinutes
 */
export function v3ListSelfMinutes<ThrowOnError extends boolean = false>(options?: Options<V3ListSelfMinutesData, ThrowOnError>) {
  return (options?.client ?? _heyApiClient).get<V3ListSelfMinutesResponse, V3ListSelfMinutesError, ThrowOnError>({
    url: '/v3/users/self/minutes',
    ...options,
  })
}

/**
 * ListSelfTop
 * Get top N items for the given field.
 */
export function v3ListSelfTop<ThrowOnError extends boolean = false>(options: Options<V3ListSelfTopData, ThrowOnError>) {
  return (options.client ?? _heyApiClient).get<V3ListSelfTopResponse, V3ListSelfTopError, ThrowOnError>({
    url: '/v3/users/self/top',
    ...options,
  })
}

/**
 * GetYearlyReportData
 */
export function v3GetYearlyReportData<ThrowOnError extends boolean = false>(options: Options<V3GetYearlyReportDataData, ThrowOnError>) {
  return (options.client ?? _heyApiClient).get<V3GetYearlyReportDataResponse, V3GetYearlyReportDataError, ThrowOnError>({
    url: '/v3/logs/yearly-report-data',
    ...options,
  })
}

/**
 * ListAggregatedLog
 */
export function v3ListAggregatedLog<ThrowOnError extends boolean = false>(options: Options<V3ListAggregatedLogData, ThrowOnError>) {
  return (options.client ?? _heyApiClient).get<V3ListAggregatedLogResponse, V3ListAggregatedLogError, ThrowOnError>({
    url: '/v3/logs/aggregated-logs',
    ...options,
  })
}

/**
 * ListRealtimeLogs
 */
export function v3ListRealtimeLogs<ThrowOnError extends boolean = false>(options: Options<V3ListRealtimeLogsData, ThrowOnError>) {
  return (options.client ?? _heyApiClient).get<V3ListRealtimeLogsResponse, V3ListRealtimeLogsError, ThrowOnError>({
    url: '/v3/logs/realtime-logs',
    ...options,
  })
}

/**
 * ListTopLanguages
 */
export function v3ListTopLanguages<ThrowOnError extends boolean = false>(options: Options<V3ListTopLanguagesData, ThrowOnError>) {
  return (options.client ?? _heyApiClient).get<V3ListTopLanguagesResponse, V3ListTopLanguagesError, ThrowOnError>({
    url: '/v3/logs/top-languages',
    ...options,
  })
}

/**
 * ListTopWorkspaces
 */
export function v3ListTopWorkspaces<ThrowOnError extends boolean = false>(options: Options<V3ListTopWorkspacesData, ThrowOnError>) {
  return (options.client ?? _heyApiClient).get<V3ListTopWorkspacesResponse, V3ListTopWorkspacesError, ThrowOnError>({
    url: '/v3/logs/top-workspaces',
    ...options,
  })
}

/**
 * BeAnyUser
 * This endpoint is for testing purposes only. It allows you to impersonate any user.
 */
export function v3BeAnyUser<ThrowOnError extends boolean = false>(options: Options<V3BeAnyUserData, ThrowOnError>) {
  return (options.client ?? _heyApiClient).post<unknown, V3BeAnyUserError, ThrowOnError>({
    url: '/v3/dev/be',
    ...options,
  })
}
