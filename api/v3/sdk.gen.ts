// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { V3GetRootData, V3GetRootResponses, V3GetTotalMinutesData, V3GetTotalMinutesResponses, V3CheckLoginData, V3CheckLoginResponses, V3GithubCallbackData, V3GithubCallbackResponses, V3GithubCallbackErrors, V3GoogleAuthData, V3GoogleAuthResponses, V3GoogleAuthErrors, V3RefreshTokenData, V3RefreshTokenResponses, V3CountUserMinutesData, V3CountUserMinutesResponses, V3CountUserMinutesErrors, V3DeleteUserAccountData, V3DeleteUserAccountResponses, V3GetUserSelfData, V3GetUserSelfResponses, V3DeleteUserDataData, V3DeleteUserDataResponses, V3ExportUserDataData, V3ExportUserDataResponses, V3GetPrivacySettingsData, V3GetPrivacySettingsResponses, V3UpdatePrivacySettingsData, V3UpdatePrivacySettingsResponses, V3UpdatePrivacySettingsErrors, V3GetTimeDistributionData, V3GetTimeDistributionResponses, V3GetTimeDistributionErrors, V3GetUserByUserIdData, V3GetUserByUserIdResponses, V3GetUserByUserIdErrors, V3GetUserShieldData, V3GetUserShieldResponses, V3GetUserShieldErrors, V3GetWorkspaceFilesData, V3GetWorkspaceFilesResponses, V3GetWorkspaceFilesErrors, V3ListSelfLatestLogsData, V3ListSelfLatestLogsResponses, V3ListSelfLatestLogsErrors, V3ListSelfMinutesData, V3ListSelfMinutesResponses, V3ListSelfMinutesErrors, V3ListSelfStatsData, V3ListSelfStatsResponses, V3ListSelfStatsErrors, V3ListSelfStatsTimeData, V3ListSelfStatsTimeResponses, V3ListSelfStatsTimeErrors, V3ListSelfTopData, V3ListSelfTopResponses, V3ListSelfTopErrors, V3SearchWorkspacesData, V3SearchWorkspacesResponses, V3SearchWorkspacesErrors, V3GetYearlyReportDataData, V3GetYearlyReportDataResponses, V3GetYearlyReportDataErrors, V3ListAggregatedLogData, V3ListAggregatedLogResponses, V3ListAggregatedLogErrors, V3ListRealtimeLogsData, V3ListRealtimeLogsResponses, V3ListRealtimeLogsErrors, V3ListTopLanguagesData, V3ListTopLanguagesResponses, V3ListTopLanguagesErrors, V3ListTopWorkspacesData, V3ListTopWorkspacesResponses, V3ListTopWorkspacesErrors, V3CreateCheckoutData, V3CreateCheckoutResponses, V3CreateCheckoutErrors, V3GetProductsData, V3GetProductsResponses, V3HandleLemonsqueezyWebhookData, V3HandleLemonsqueezyWebhookResponses, V3HandleLemonsqueezyWebhookErrors, V3GetLeaderboardData, V3GetLeaderboardResponses, V3GetLeaderboardErrors, V3BeAnyUserData, V3BeAnyUserResponses, V3BeAnyUserErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { v3CheckLoginResponseTransformer, v3GetUserSelfResponseTransformer, v3ExportUserDataResponseTransformer, v3GetUserByUserIdResponseTransformer, v3GetWorkspaceFilesResponseTransformer, v3CreateCheckoutResponseTransformer, v3GetLeaderboardResponseTransformer } from './transformers.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Root endpoint
 * Root endpoint handler.
 */
export const v3GetRoot = <ThrowOnError extends boolean = false>(options?: Options<V3GetRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetRootResponses, unknown, ThrowOnError>({
        url: '/v3',
        ...options
    });
};

/**
 * Total minutes endpoint
 * Total minutes endpoint handler.
 */
export const v3GetTotalMinutes = <ThrowOnError extends boolean = false>(options?: Options<V3GetTotalMinutesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetTotalMinutesResponses, unknown, ThrowOnError>({
        url: '/v3/total-minutes',
        ...options
    });
};

/**
 * Check login status
 * Check if the user is currently logged in.
 *
 * Returns user information if logged in, or logged_in: false if not.
 */
export const v3CheckLogin = <ThrowOnError extends boolean = false>(options?: Options<V3CheckLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3CheckLoginResponses, unknown, ThrowOnError>({
        responseTransformer: v3CheckLoginResponseTransformer,
        url: '/v3/auth/check',
        ...options
    });
};

/**
 * GitHub OAuth callback
 * Handle GitHub OAuth callback.
 *
 * This endpoint receives the authorization code from GitHub and redirects
 * to the frontend with user authentication information.
 */
export const v3GithubCallback = <ThrowOnError extends boolean = false>(options: Options<V3GithubCallbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GithubCallbackResponses, V3GithubCallbackErrors, ThrowOnError>({
        url: '/v3/auth/github',
        ...options
    });
};

/**
 * Google OAuth login
 * Handle Google OAuth authentication flow.
 *
 * This endpoint exchanges a Google authorization code for user information
 * and either creates a new user or logs in an existing user.
 */
export const v3GoogleAuth = <ThrowOnError extends boolean = false>(options: Options<V3GoogleAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3GoogleAuthResponses, V3GoogleAuthErrors, ThrowOnError>({
        url: '/v3/auth/google',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh authentication tokens
 * Refresh user authentication tokens.
 *
 * Generates new upload_token and token_v1 for the authenticated user.
 */
export const v3RefreshToken = <ThrowOnError extends boolean = false>(options?: Options<V3RefreshTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<V3RefreshTokenResponses, unknown, ThrowOnError>({
        url: '/v3/auth/refresh-token',
        ...options
    });
};

/**
 * Count user total minutes
 * Count the total minutes for a user, with optional meta filter.
 */
export const v3CountUserMinutes = <ThrowOnError extends boolean = false>(options?: Options<V3CountUserMinutesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3CountUserMinutesResponses, V3CountUserMinutesErrors, ThrowOnError>({
        url: '/v3/users/self/workspaces',
        ...options
    });
};

/**
 * Delete user account
 * Delete the current user's account and all associated data.
 */
export const v3DeleteUserAccount = <ThrowOnError extends boolean = false>(options?: Options<V3DeleteUserAccountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<V3DeleteUserAccountResponses, unknown, ThrowOnError>({
        url: '/v3/users/self',
        ...options
    });
};

/**
 * Get current user information
 */
export const v3GetUserSelf = <ThrowOnError extends boolean = false>(options?: Options<V3GetUserSelfData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetUserSelfResponses, unknown, ThrowOnError>({
        responseTransformer: v3GetUserSelfResponseTransformer,
        url: '/v3/users/self',
        ...options
    });
};

/**
 * Delete user data
 * Delete all user data but keep the account.
 */
export const v3DeleteUserData = <ThrowOnError extends boolean = false>(options?: Options<V3DeleteUserDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<V3DeleteUserDataResponses, unknown, ThrowOnError>({
        url: '/v3/users/self/data',
        ...options
    });
};

/**
 * Export user data
 * Export user data in CSV format.
 */
export const v3ExportUserData = <ThrowOnError extends boolean = false>(options?: Options<V3ExportUserDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<V3ExportUserDataResponses, unknown, ThrowOnError>({
        responseTransformer: v3ExportUserDataResponseTransformer,
        url: '/v3/users/self/export',
        ...options
    });
};

/**
 * Get user privacy settings
 * Get current user's privacy settings.
 */
export const v3GetPrivacySettings = <ThrowOnError extends boolean = false>(options?: Options<V3GetPrivacySettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetPrivacySettingsResponses, unknown, ThrowOnError>({
        url: '/v3/users/self/privacy',
        ...options
    });
};

/**
 * Update user privacy settings
 * Update current user's privacy settings.
 */
export const v3UpdatePrivacySettings = <ThrowOnError extends boolean = false>(options: Options<V3UpdatePrivacySettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3UpdatePrivacySettingsResponses, V3UpdatePrivacySettingsErrors, ThrowOnError>({
        url: '/v3/users/self/privacy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get user time distribution by hour and minute
 * Get user coding time distribution by hour and minute.
 */
export const v3GetTimeDistribution = <ThrowOnError extends boolean = false>(options?: Options<V3GetTimeDistributionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetTimeDistributionResponses, V3GetTimeDistributionErrors, ThrowOnError>({
        url: '/v3/users/self/time-distribution',
        ...options
    });
};

/**
 * Get user information by ID
 * Get user information filtered by privacy settings.
 *
 * Only users with DETAIL_PUBLIC privacy level can be accessed by external users.
 * Users with PRIVATE or STATS_PUBLIC levels will return 403 error unless accessing their own data.
 * Individual contact settings (show_email/show_github) control visibility of contact information.
 */
export const v3GetUserByUserId = <ThrowOnError extends boolean = false>(options: Options<V3GetUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GetUserByUserIdResponses, V3GetUserByUserIdErrors, ThrowOnError>({
        responseTransformer: v3GetUserByUserIdResponseTransformer,
        url: '/v3/users/{user_id}',
        ...options
    });
};

/**
 * Get user coding time shield badge
 * Get a shield with user's coding time information.
 *
 * Args:
 * session: The database session.
 * uid: The user ID.
 * minutes: Optional time range in minutes to filter by.
 * project: Optional project name to filter by.
 * language: Optional language to filter by. If provided, only statistics for this language will be counted.
 * only_hours: If True, the message will only show hours (e.g., '2h').
 *
 * Returns:
 * A ShieldResponse object with badge data.
 */
export const v3GetUserShield = <ThrowOnError extends boolean = false>(options: Options<V3GetUserShieldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GetUserShieldResponses, V3GetUserShieldErrors, ThrowOnError>({
        url: '/v3/users/shield',
        ...options
    });
};

/**
 * Get workspace file activities
 * Get file activities for a specific workspace/project.
 */
export const v3GetWorkspaceFiles = <ThrowOnError extends boolean = false>(options: Options<V3GetWorkspaceFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GetWorkspaceFilesResponses, V3GetWorkspaceFilesErrors, ThrowOnError>({
        responseTransformer: v3GetWorkspaceFilesResponseTransformer,
        url: '/v3/users/self/workspace',
        ...options
    });
};

/**
 * Get user latest event logs
 */
export const v3ListSelfLatestLogs = <ThrowOnError extends boolean = false>(options?: Options<V3ListSelfLatestLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3ListSelfLatestLogsResponses, V3ListSelfLatestLogsErrors, ThrowOnError>({
        url: '/v3/users/self/latest-logs',
        ...options
    });
};

/**
 * Get user daily coding minutes
 */
export const v3ListSelfMinutes = <ThrowOnError extends boolean = false>(options?: Options<V3ListSelfMinutesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3ListSelfMinutesResponses, V3ListSelfMinutesErrors, ThrowOnError>({
        url: '/v3/users/self/minutes',
        ...options
    });
};

/**
 * Get user statistics by field and time
 * Get user stats by a specific field (not time).
 */
export const v3ListSelfStats = <ThrowOnError extends boolean = false>(options: Options<V3ListSelfStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3ListSelfStatsResponses, V3ListSelfStatsErrors, ThrowOnError>({
        url: '/v3/users/self/stats',
        ...options
    });
};

/**
 * Get user statistics by time unit
 * Get user stats by time unit only (no by field).
 */
export const v3ListSelfStatsTime = <ThrowOnError extends boolean = false>(options?: Options<V3ListSelfStatsTimeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3ListSelfStatsTimeResponses, V3ListSelfStatsTimeErrors, ThrowOnError>({
        url: '/v3/users/self/stats_time',
        ...options
    });
};

/**
 * Get user top statistics by field
 * Get top N items for the given field.
 */
export const v3ListSelfTop = <ThrowOnError extends boolean = false>(options: Options<V3ListSelfTopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3ListSelfTopResponses, V3ListSelfTopErrors, ThrowOnError>({
        url: '/v3/users/self/top',
        ...options
    });
};

/**
 * Search user workspaces
 * Search current user's unique workspace names.
 */
export const v3SearchWorkspaces = <ThrowOnError extends boolean = false>(options?: Options<V3SearchWorkspacesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3SearchWorkspacesResponses, V3SearchWorkspacesErrors, ThrowOnError>({
        url: '/v3/users/self/workspaces/search',
        ...options
    });
};

/**
 * Get yearly report data
 */
export const v3GetYearlyReportData = <ThrowOnError extends boolean = false>(options: Options<V3GetYearlyReportDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GetYearlyReportDataResponses, V3GetYearlyReportDataErrors, ThrowOnError>({
        url: '/v3/logs/yearly-report-data',
        ...options
    });
};

/**
 * Get aggregated minute-based logs
 */
export const v3ListAggregatedLog = <ThrowOnError extends boolean = false>(options: Options<V3ListAggregatedLogData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3ListAggregatedLogResponses, V3ListAggregatedLogErrors, ThrowOnError>({
        url: '/v3/logs/aggregated-logs',
        ...options
    });
};

/**
 * Get real-time event logs
 */
export const v3ListRealtimeLogs = <ThrowOnError extends boolean = false>(options: Options<V3ListRealtimeLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3ListRealtimeLogsResponses, V3ListRealtimeLogsErrors, ThrowOnError>({
        url: '/v3/logs/realtime-logs',
        ...options
    });
};

/**
 * Get top programming languages
 */
export const v3ListTopLanguages = <ThrowOnError extends boolean = false>(options: Options<V3ListTopLanguagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3ListTopLanguagesResponses, V3ListTopLanguagesErrors, ThrowOnError>({
        url: '/v3/logs/top-languages',
        ...options
    });
};

/**
 * Get top workspaces by activity
 */
export const v3ListTopWorkspaces = <ThrowOnError extends boolean = false>(options: Options<V3ListTopWorkspacesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3ListTopWorkspacesResponses, V3ListTopWorkspacesErrors, ThrowOnError>({
        url: '/v3/logs/top-workspaces',
        ...options
    });
};

/**
 * Create checkout session
 * Create a checkout session for the authenticated user.
 */
export const v3CreateCheckout = <ThrowOnError extends boolean = false>(options: Options<V3CreateCheckoutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3CreateCheckoutResponses, V3CreateCheckoutErrors, ThrowOnError>({
        responseTransformer: v3CreateCheckoutResponseTransformer,
        url: '/v3/v3/payments/checkout',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get available products
 * Get list of available products for purchase.
 */
export const v3GetProducts = <ThrowOnError extends boolean = false>(options?: Options<V3GetProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetProductsResponses, unknown, ThrowOnError>({
        url: '/v3/v3/payments/products',
        ...options
    });
};

/**
 * Handle LemonSqueezy webhooks
 * Handle webhooks from LemonSqueezy for payment status updates.
 */
export const v3HandleLemonsqueezyWebhook = <ThrowOnError extends boolean = false>(options: Options<V3HandleLemonsqueezyWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3HandleLemonsqueezyWebhookResponses, V3HandleLemonsqueezyWebhookErrors, ThrowOnError>({
        url: '/v3/v3/payments/webhooks/lemonsqueezy',
        ...options
    });
};

/**
 * Get coding time leaderboard
 * Get coding time leaderboard for public users.
 */
export const v3GetLeaderboard = <ThrowOnError extends boolean = false>(options?: Options<V3GetLeaderboardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetLeaderboardResponses, V3GetLeaderboardErrors, ThrowOnError>({
        responseTransformer: v3GetLeaderboardResponseTransformer,
        url: '/v3/public/leaderboard',
        ...options
    });
};

/**
 * Switch to any user session (dev only)
 * This endpoint is for testing purposes only. It allows you to impersonate any user.
 */
export const v3BeAnyUser = <ThrowOnError extends boolean = false>(options: Options<V3BeAnyUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3BeAnyUserResponses, V3BeAnyUserErrors, ThrowOnError>({
        url: '/v3/dev/be',
        ...options
    });
};