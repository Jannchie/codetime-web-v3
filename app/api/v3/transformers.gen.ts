// This file is auto-generated by @hey-api/openapi-ts

import type { V3GetTotalMinutesResponse, V3GetUserSelfResponse, V3GetSelfOverallRankResponse, V3GetSelfTopLanguagesRankResponse, V3GetUserByUserIdResponse, V3CreateCheckoutResponse, V3GetActiveDiscountsResponse, V3GetLanguageRankingResponse, V3GetLeaderboardResponse, V3GetUserCodingHistoryResponse, V3GetUserLanguageRankResponse, V3GetUserOverallRankResponse, V3GetUserTopLanguagesRankResponse, V3GetTagsResponse, V3CreateTagResponse, V3GetTagResponse, V3UpdateTagResponse, V3EvaluateWorkspaceTagsResponse, V3GetTagHistoryResponse, V3GetTagTimeStatsResponse } from './types.gen';

const totalMinutesResponseSchemaResponseTransformer = (data: any) => {
    data.cacheTimestamp = new Date(data.cacheTimestamp);
    return data;
};

export const v3GetTotalMinutesResponseTransformer = async (data: any): Promise<V3GetTotalMinutesResponse> => {
    data = totalMinutesResponseSchemaResponseTransformer(data);
    return data;
};

const userSelfPublicSchemaResponseTransformer = (data: any) => {
    if (data.planExpiresAt) {
        data.planExpiresAt = new Date(data.planExpiresAt);
    }
    data.createdAt = new Date(data.createdAt);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const v3GetUserSelfResponseTransformer = async (data: any): Promise<V3GetUserSelfResponse> => {
    data = userSelfPublicSchemaResponseTransformer(data);
    return data;
};

const dtoUserOverallRankResponseSchemaResponseTransformer = (data: any) => {
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const v3GetSelfOverallRankResponseTransformer = async (data: any): Promise<V3GetSelfOverallRankResponse> => {
    data = dtoUserOverallRankResponseSchemaResponseTransformer(data);
    return data;
};

const dtoUserTopLanguagesRankResponseSchemaResponseTransformer = (data: any) => {
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const v3GetSelfTopLanguagesRankResponseTransformer = async (data: any): Promise<V3GetSelfTopLanguagesRankResponse> => {
    data = dtoUserTopLanguagesRankResponseSchemaResponseTransformer(data);
    return data;
};

const dtoUserPublicSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const v3GetUserByUserIdResponseTransformer = async (data: any): Promise<V3GetUserByUserIdResponse> => {
    data = dtoUserPublicSchemaResponseTransformer(data);
    return data;
};

const checkoutResponseSchemaResponseTransformer = (data: any) => {
    data.expiresAt = new Date(data.expiresAt);
    return data;
};

export const v3CreateCheckoutResponseTransformer = async (data: any): Promise<V3CreateCheckoutResponse> => {
    data = checkoutResponseSchemaResponseTransformer(data);
    return data;
};

const discountPublicSchemaResponseTransformer = (data: any) => {
    if (data.expiresAt) {
        data.expiresAt = new Date(data.expiresAt);
    }
    return data;
};

export const v3GetActiveDiscountsResponseTransformer = async (data: any): Promise<V3GetActiveDiscountsResponse> => {
    data = data.map((item: any) => {
        return discountPublicSchemaResponseTransformer(item);
    });
    return data;
};

const srcDtoUserPublicSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

const languageRankingEntrySchemaResponseTransformer = (data: any) => {
    data.user = srcDtoUserPublicSchemaResponseTransformer(data.user);
    return data;
};

const languageRankingResponseSchemaResponseTransformer = (data: any) => {
    data.entries = data.entries.map((item: any) => {
        return languageRankingEntrySchemaResponseTransformer(item);
    });
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const v3GetLanguageRankingResponseTransformer = async (data: any): Promise<V3GetLanguageRankingResponse> => {
    data = languageRankingResponseSchemaResponseTransformer(data);
    return data;
};

const leaderboardEntrySchemaResponseTransformer = (data: any) => {
    data.user = srcDtoUserPublicSchemaResponseTransformer(data.user);
    return data;
};

const leaderboardResponseSchemaResponseTransformer = (data: any) => {
    data.entries = data.entries.map((item: any) => {
        return leaderboardEntrySchemaResponseTransformer(item);
    });
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const v3GetLeaderboardResponseTransformer = async (data: any): Promise<V3GetLeaderboardResponse> => {
    data = leaderboardResponseSchemaResponseTransformer(data);
    return data;
};

const userCodingHistoryResponseSchemaResponseTransformer = (data: any) => {
    data.periodStart = new Date(data.periodStart);
    data.periodEnd = new Date(data.periodEnd);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const v3GetUserCodingHistoryResponseTransformer = async (data: any): Promise<V3GetUserCodingHistoryResponse> => {
    data = userCodingHistoryResponseSchemaResponseTransformer(data);
    return data;
};

const userLanguageRankResponseSchemaResponseTransformer = (data: any) => {
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const v3GetUserLanguageRankResponseTransformer = async (data: any): Promise<V3GetUserLanguageRankResponse> => {
    data = userLanguageRankResponseSchemaResponseTransformer(data);
    return data;
};

const srcDtoUserOverallRankResponseSchemaResponseTransformer = (data: any) => {
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const v3GetUserOverallRankResponseTransformer = async (data: any): Promise<V3GetUserOverallRankResponse> => {
    data = srcDtoUserOverallRankResponseSchemaResponseTransformer(data);
    return data;
};

const srcDtoUserTopLanguagesRankResponseSchemaResponseTransformer = (data: any) => {
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const v3GetUserTopLanguagesRankResponseTransformer = async (data: any): Promise<V3GetUserTopLanguagesRankResponse> => {
    data = srcDtoUserTopLanguagesRankResponseSchemaResponseTransformer(data);
    return data;
};

const tagResponseSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.updatedAt = new Date(data.updatedAt);
    return data;
};

export const v3GetTagsResponseTransformer = async (data: any): Promise<V3GetTagsResponse> => {
    data = data.map((item: any) => {
        return tagResponseSchemaResponseTransformer(item);
    });
    return data;
};

export const v3CreateTagResponseTransformer = async (data: any): Promise<V3CreateTagResponse> => {
    data = tagResponseSchemaResponseTransformer(data);
    return data;
};

export const v3GetTagResponseTransformer = async (data: any): Promise<V3GetTagResponse> => {
    data = tagResponseSchemaResponseTransformer(data);
    return data;
};

export const v3UpdateTagResponseTransformer = async (data: any): Promise<V3UpdateTagResponse> => {
    data = tagResponseSchemaResponseTransformer(data);
    return data;
};

const workspaceEvaluationResponseSchemaResponseTransformer = (data: any) => {
    data.matching_tags = data.matching_tags.map((item: any) => {
        return tagResponseSchemaResponseTransformer(item);
    });
    return data;
};

export const v3EvaluateWorkspaceTagsResponseTransformer = async (data: any): Promise<V3EvaluateWorkspaceTagsResponse> => {
    data = workspaceEvaluationResponseSchemaResponseTransformer(data);
    return data;
};

const tagHistoryResponseSchemaResponseTransformer = (data: any) => {
    data.tag = tagResponseSchemaResponseTransformer(data.tag);
    data.periodStart = new Date(data.periodStart);
    data.periodEnd = new Date(data.periodEnd);
    return data;
};

export const v3GetTagHistoryResponseTransformer = async (data: any): Promise<V3GetTagHistoryResponse> => {
    data = tagHistoryResponseSchemaResponseTransformer(data);
    return data;
};

const tagTimeDataSchemaResponseTransformer = (data: any) => {
    data.tag = tagResponseSchemaResponseTransformer(data.tag);
    return data;
};

const tagTimeStatsResponseSchemaResponseTransformer = (data: any) => {
    data.data = data.data.map((item: any) => {
        return tagTimeDataSchemaResponseTransformer(item);
    });
    data.periodStart = new Date(data.periodStart);
    data.periodEnd = new Date(data.periodEnd);
    return data;
};

export const v3GetTagTimeStatsResponseTransformer = async (data: any): Promise<V3GetTagTimeStatsResponse> => {
    data = tagTimeStatsResponseSchemaResponseTransformer(data);
    return data;
};