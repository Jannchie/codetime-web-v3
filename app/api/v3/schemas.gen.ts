// This file is auto-generated by @hey-api/openapi-ts

export const CheckoutRequestSchema = {
    properties: {
        type: {
            type: 'string'
        },
        product: {
            type: 'string'
        }
    },
    type: 'object',
    required: ['product', 'type'],
    title: 'CheckoutRequest'
} as const;

export const CheckoutResponseSchema = {
    properties: {
        checkoutUrl: {
            type: 'string'
        },
        expiresAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    type: 'object',
    required: ['checkoutUrl', 'expiresAt'],
    title: 'CheckoutResponse'
} as const;

export const EventLogPublicSchema = {
    properties: {
        eventTime: {
            type: 'integer'
        },
        language: {
            type: 'string'
        },
        project: {
            type: 'string'
        },
        relativeFile: {
            type: 'string'
        },
        editor: {
            type: 'string'
        },
        platform: {
            type: 'string'
        },
        absoluteFile: {
            type: 'string'
        },
        gitOrigin: {
            type: 'string'
        },
        gitBranch: {
            type: 'string'
        }
    },
    type: 'object',
    required: ['absoluteFile', 'editor', 'eventTime', 'gitBranch', 'gitOrigin', 'language', 'platform', 'project', 'relativeFile'],
    title: 'EventLogPublic'
} as const;

export const EventLogRequestSchema = {
    properties: {
        eventTime: {
            type: 'integer'
        },
        language: {
            type: 'string'
        },
        project: {
            type: 'string'
        },
        relativeFile: {
            type: 'string'
        },
        editor: {
            type: 'string'
        },
        platform: {
            type: 'string'
        },
        absoluteFile: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        gitOrigin: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        gitBranch: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['editor', 'eventTime', 'language', 'platform', 'project', 'relativeFile'],
    title: 'EventLogRequest'
} as const;

export const LeaderboardEntrySchema = {
    properties: {
        user: {
            '$ref': '#/components/schemas/src_dto_UserPublic'
        },
        totalMinutes: {
            type: 'integer'
        },
        rank: {
            type: 'integer'
        }
    },
    type: 'object',
    required: ['rank', 'totalMinutes', 'user'],
    title: 'LeaderboardEntry'
} as const;

export const LeaderboardResponseSchema = {
    properties: {
        entries: {
            items: {
                '$ref': '#/components/schemas/LeaderboardEntry'
            },
            type: 'array'
        },
        totalUsers: {
            type: 'integer'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    type: 'object',
    required: ['entries', 'totalUsers', 'updatedAt'],
    title: 'LeaderboardResponse'
} as const;

export const PlanStatusSchema = {
    type: 'string',
    enum: ['active', 'cancelled', 'expired', 'on_trial', 'paused', 'past_due', 'unpaid', ''],
    title: 'PlanStatus'
} as const;

export const PrivacySettingsRequestSchema = {
    properties: {
        privacyLevel: {
            type: 'string'
        },
        showEmail: {
            type: 'boolean',
            default: false
        },
        showGithub: {
            type: 'boolean',
            default: false
        }
    },
    type: 'object',
    required: ['privacyLevel'],
    title: 'PrivacySettingsRequest'
} as const;

export const PrivacySettingsResponseSchema = {
    properties: {
        privacyLevel: {
            type: 'string'
        },
        showEmail: {
            type: 'boolean'
        },
        showGithub: {
            type: 'boolean'
        }
    },
    type: 'object',
    required: ['privacyLevel', 'showEmail', 'showGithub'],
    title: 'PrivacySettingsResponse'
} as const;

export const ProductPublicSchema = {
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        price: {
            type: 'integer'
        },
        currency: {
            type: 'string'
        },
        interval: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['currency', 'description', 'id', 'name', 'price'],
    title: 'ProductPublic'
} as const;

export const RootResponseSchema = {
    properties: {
        message: {
            type: 'string'
        },
        documentUrl: {
            type: 'string'
        }
    },
    type: 'object',
    required: ['documentUrl', 'message'],
    title: 'RootResponse'
} as const;

export const ShieldResponseSchema = {
    properties: {
        schemaVersion: {
            type: 'integer',
            default: 1
        },
        logoSvg: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        label: {
            type: 'string'
        },
        message: {
            type: 'string'
        },
        color: {
            type: 'string'
        }
    },
    type: 'object',
    required: ['color', 'label', 'message'],
    title: 'ShieldResponse'
} as const;

export const SimpleMinutesSchema = {
    properties: {
        minutes: {
            type: 'integer'
        }
    },
    type: 'object',
    required: ['minutes'],
    title: 'SimpleMinutes'
} as const;

export const StatsDataSchema = {
    properties: {
        duration: {
            type: 'integer'
        },
        time: {
            type: 'string'
        },
        by: {
            type: 'string'
        }
    },
    type: 'object',
    required: ['by', 'duration', 'time'],
    title: 'StatsData'
} as const;

export const StatsResponseSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/StatsData'
            },
            type: 'array'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'StatsResponse'
} as const;

export const StatsTimeDataSchema = {
    properties: {
        duration: {
            type: 'integer'
        },
        time: {
            type: 'string'
        }
    },
    type: 'object',
    required: ['duration', 'time'],
    title: 'StatsTimeData'
} as const;

export const StatsTimeResponseSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/StatsTimeData'
            },
            type: 'array'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'StatsTimeResponse'
} as const;

export const TagCreateRequestSchema = {
    properties: {
        name: {
            type: 'string'
        },
        color: {
            type: 'string'
        },
        emoji: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['color', 'name'],
    title: 'TagCreateRequest'
} as const;

export const TagHistoryResponseSchema = {
    properties: {
        tag: {
            '$ref': '#/components/schemas/TagResponse'
        },
        data: {
            items: {
                '$ref': '#/components/schemas/StatsTimeData'
            },
            type: 'array'
        },
        totalMinutes: {
            type: 'integer'
        },
        periodStart: {
            type: 'string',
            format: 'date'
        },
        periodEnd: {
            type: 'string',
            format: 'date'
        }
    },
    type: 'object',
    required: ['data', 'periodEnd', 'periodStart', 'tag', 'totalMinutes'],
    title: 'TagHistoryResponse'
} as const;

export const TagResponseSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        color: {
            type: 'string'
        },
        emoji: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        rules: {}
    },
    type: 'object',
    required: ['color', 'createdAt', 'id', 'name', 'rules', 'updatedAt'],
    title: 'TagResponse'
} as const;

export const TagTimeDataSchema = {
    properties: {
        tag: {
            '$ref': '#/components/schemas/TagResponse'
        },
        totalMinutes: {
            type: 'integer'
        }
    },
    type: 'object',
    required: ['tag', 'totalMinutes'],
    title: 'TagTimeData'
} as const;

export const TagTimeStatsResponseSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/TagTimeData'
            },
            type: 'array'
        },
        totalMinutes: {
            type: 'integer'
        },
        periodStart: {
            type: 'string',
            format: 'date'
        },
        periodEnd: {
            type: 'string',
            format: 'date'
        }
    },
    type: 'object',
    required: ['data', 'periodEnd', 'periodStart', 'totalMinutes'],
    title: 'TagTimeStatsResponse'
} as const;

export const TagUpdateRequestSchema = {
    properties: {
        name: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        color: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        emoji: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        rules: {}
    },
    type: 'object',
    required: ['rules'],
    title: 'TagUpdateRequest'
} as const;

export const TimeDistributionDataSchema = {
    properties: {
        hour: {
            type: 'integer'
        },
        minute: {
            type: 'integer'
        },
        count: {
            type: 'integer'
        }
    },
    type: 'object',
    required: ['count', 'hour', 'minute'],
    title: 'TimeDistributionData'
} as const;

export const TimeDistributionResponseSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/TimeDistributionData'
            },
            type: 'array'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'TimeDistributionResponse'
} as const;

export const TokenRefreshResponseSchema = {
    properties: {
        token: {
            type: 'string'
        },
        tokenV1: {
            type: 'string'
        }
    },
    type: 'object',
    required: ['token', 'tokenV1'],
    title: 'TokenRefreshResponse'
} as const;

export const TopPublicSchema = {
    properties: {
        field: {
            type: 'string'
        },
        minutes: {
            type: 'integer'
        }
    },
    type: 'object',
    required: ['field', 'minutes'],
    title: 'TopPublic'
} as const;

export const TotalMinutesResponseSchema = {
    properties: {
        totalMinutes: {
            type: 'integer'
        },
        last24HMinutes: {
            type: 'integer'
        },
        cacheTimestamp: {
            type: 'string',
            format: 'date-time'
        }
    },
    type: 'object',
    required: ['cacheTimestamp', 'last24HMinutes', 'totalMinutes'],
    title: 'TotalMinutesResponse'
} as const;

export const UserDeleteResponseSchema = {
    properties: {
        success: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        }
    },
    type: 'object',
    required: ['message', 'success'],
    title: 'UserDeleteResponse'
} as const;

export const UserSelfPublicSchema = {
    properties: {
        id: {
            type: 'integer'
        },
        email: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        username: {
            type: 'string'
        },
        avatar: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        githubId: {
            oneOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ]
        },
        bio: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        googleId: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        plan: {
            type: 'string'
        },
        timezone: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        uploadToken: {
            type: 'string'
        },
        planExpiresAt: {
            oneOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ]
        },
        planStatus: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PlanStatus'
                },
                {
                    type: 'null'
                }
            ]
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    type: 'object',
    required: ['createdAt', 'id', 'plan', 'updatedAt', 'uploadToken', 'username'],
    title: 'UserSelfPublic'
} as const;

export const WebhookResponseSchema = {
    properties: {
        success: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        }
    },
    type: 'object',
    required: ['message', 'success'],
    title: 'WebhookResponse'
} as const;

export const WorkspaceEvaluationRequestSchema = {
    properties: {
        workspaceName: {
            type: 'string'
        },
        language: {
            type: 'string'
        },
        gitOrigin: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        gitBranch: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        platform: {
            type: 'string'
        },
        editor: {
            type: 'string'
        },
        absoluteFile: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        relativeFile: {
            type: 'string'
        }
    },
    type: 'object',
    required: ['editor', 'language', 'platform', 'relativeFile', 'workspaceName'],
    title: 'WorkspaceEvaluationRequest'
} as const;

export const WorkspaceEvaluationResponseSchema = {
    properties: {
        matching_tags: {
            items: {
                '$ref': '#/components/schemas/TagResponse'
            },
            type: 'array'
        }
    },
    type: 'object',
    required: ['matching_tags'],
    title: 'WorkspaceEvaluationResponse'
} as const;

export const WorkspaceFileActivitySchema = {
    properties: {
        language: {
            type: 'string'
        },
        relativeFile: {
            type: 'string'
        },
        gitBranch: {
            type: 'string'
        },
        minutes: {
            type: 'integer'
        }
    },
    type: 'object',
    required: ['gitBranch', 'language', 'minutes', 'relativeFile'],
    title: 'WorkspaceFileActivity'
} as const;

export const WorkspaceSearchResponseSchema = {
    properties: {
        results: {
            items: {
                '$ref': '#/components/schemas/WorkspaceSearchResult'
            },
            type: 'array'
        },
        totalResults: {
            type: 'integer'
        }
    },
    type: 'object',
    required: ['results', 'totalResults'],
    title: 'WorkspaceSearchResponse'
} as const;

export const WorkspaceSearchResultSchema = {
    properties: {
        workspaceName: {
            type: 'string'
        }
    },
    type: 'object',
    required: ['workspaceName'],
    title: 'WorkspaceSearchResult'
} as const;

export const YearlyReportDataPublicSchema = {
    properties: {
        topLanguages: {
            items: {
                '$ref': '#/components/schemas/TopPublic'
            },
            type: 'array'
        },
        hourlyDistribution: {
            items: {
                '$ref': '#/components/schemas/TopPublic'
            },
            type: 'array'
        },
        dailyDistribution: {
            items: {
                '$ref': '#/components/schemas/TopPublic'
            },
            type: 'array'
        }
    },
    type: 'object',
    required: ['dailyDistribution', 'hourlyDistribution', 'topLanguages'],
    title: 'YearlyReportDataPublic'
} as const;

export const dto_UserPublicSchema = {
    properties: {
        id: {
            type: 'integer'
        },
        email: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        username: {
            type: 'string'
        },
        avatar: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        githubId: {
            oneOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ]
        },
        bio: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        googleId: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        plan: {
            type: 'string'
        },
        timezone: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    type: 'object',
    required: ['createdAt', 'id', 'plan', 'updatedAt', 'username'],
    title: 'UserPublic'
} as const;

export const src_dto_UserPublicSchema = {
    properties: {
        id: {
            type: 'integer'
        },
        email: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        username: {
            type: 'string'
        },
        avatar: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        githubId: {
            oneOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ]
        },
        bio: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        googleId: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        plan: {
            type: 'string'
        },
        timezone: {
            oneOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ]
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    type: 'object',
    required: ['createdAt', 'id', 'plan', 'updatedAt', 'username'],
    title: 'UserPublic'
} as const;