// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from './client';
import type { V3GetRootData, V3GetRootResponses, V3GetTotalMinutesData, V3GetTotalMinutesResponses, V3GithubCallbackData, V3GithubCallbackResponses, V3GithubCallbackErrors, V3GoogleAuthData, V3GoogleAuthResponses, V3GoogleAuthErrors, V3LogoutData, V3LogoutResponses, V3RefreshTokenData, V3RefreshTokenResponses, V3DeleteUserAccountData, V3DeleteUserAccountResponses, V3GetUserSelfData, V3GetUserSelfResponses, V3DeleteUserDataData, V3DeleteUserDataResponses, V3ExportUserDataData, V3ExportUserDataResponses, V3GetPrivacySettingsData, V3GetPrivacySettingsResponses, V3UpdatePrivacySettingsData, V3UpdatePrivacySettingsResponses, V3UpdatePrivacySettingsErrors, V3GetSelfMinutesData, V3GetSelfMinutesResponses, V3GetSelfMinutesErrors, V3GetTimeDistributionData, V3GetTimeDistributionResponses, V3GetTimeDistributionErrors, V3GetUserByUserIdData, V3GetUserByUserIdResponses, V3GetUserByUserIdErrors, V3GetUserShieldData, V3GetUserShieldResponses, V3GetUserShieldErrors, V3GetWorkspaceFilesData, V3GetWorkspaceFilesResponses, V3GetWorkspaceFilesErrors, V3ListSelfLatestLogsData, V3ListSelfLatestLogsResponses, V3ListSelfLatestLogsErrors, V3ListSelfStatsData, V3ListSelfStatsResponses, V3ListSelfStatsErrors, V3ListSelfStatsTimeData, V3ListSelfStatsTimeResponses, V3ListSelfStatsTimeErrors, V3ListSelfTopData, V3ListSelfTopResponses, V3ListSelfTopErrors, V3PostEventLogData, V3PostEventLogResponses, V3PostEventLogErrors, V3SearchWorkspacesData, V3SearchWorkspacesResponses, V3SearchWorkspacesErrors, V3GetYearlyReportDataData, V3GetYearlyReportDataResponses, V3GetYearlyReportDataErrors, V3CreateCheckoutData, V3CreateCheckoutResponses, V3CreateCheckoutErrors, V3GetProductsData, V3GetProductsResponses, V3HandleLemonsqueezyWebhookData, V3HandleLemonsqueezyWebhookResponses, V3GetLeaderboardData, V3GetLeaderboardResponses, V3GetLeaderboardErrors, V3GetTagsData, V3GetTagsResponses, V3CreateTagData, V3CreateTagResponses, V3CreateTagErrors, V3GetTagRulesData, V3GetTagRulesResponses, V3GetTagRulesErrors, V3CreateTagRuleData, V3CreateTagRuleResponses, V3CreateTagRuleErrors, V3DeleteRuleData, V3DeleteRuleResponses, V3DeleteRuleErrors, V3GetRuleData, V3GetRuleResponses, V3GetRuleErrors, V3UpdateRuleData, V3UpdateRuleResponses, V3UpdateRuleErrors, V3DeleteTagData, V3DeleteTagResponses, V3DeleteTagErrors, V3GetTagData, V3GetTagResponses, V3GetTagErrors, V3UpdateTagData, V3UpdateTagResponses, V3UpdateTagErrors, V3EvaluateWorkspaceTagsData, V3EvaluateWorkspaceTagsResponses, V3EvaluateWorkspaceTagsErrors, V3GetAllTagsHistoryData, V3GetAllTagsHistoryResponses, V3GetAllTagsHistoryErrors, V3GetTagHistoryData, V3GetTagHistoryResponses, V3GetTagHistoryErrors, V3GetTagTimeStatsData, V3GetTagTimeStatsResponses, V3GetTagTimeStatsErrors, V3GetCalendarFeedData, V3GetCalendarFeedResponses, V3GetCalendarFeedErrors, V3GetCalendarInfoData, V3GetCalendarInfoResponses, V3BeAnyUserData, V3BeAnyUserResponses, V3BeAnyUserErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { v3GetTotalMinutesResponseTransformer, v3GetUserSelfResponseTransformer, v3GetUserByUserIdResponseTransformer, v3CreateCheckoutResponseTransformer, v3GetLeaderboardResponseTransformer, v3GetTagsResponseTransformer, v3CreateTagResponseTransformer, v3GetTagRulesResponseTransformer, v3CreateTagRuleResponseTransformer, v3GetRuleResponseTransformer, v3UpdateRuleResponseTransformer, v3GetTagResponseTransformer, v3UpdateTagResponseTransformer, v3EvaluateWorkspaceTagsResponseTransformer, v3GetAllTagsHistoryResponseTransformer, v3GetTagHistoryResponseTransformer, v3GetTagTimeStatsResponseTransformer } from './transformers.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * GetRoot
 * Root endpoint handler.
 */
export const v3GetRoot = <ThrowOnError extends boolean = false>(options?: Options<V3GetRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetRootResponses, unknown, ThrowOnError>({
        url: '/v3',
        ...options
    });
};

/**
 * GetTotalMinutes
 * Total minutes endpoint handler with background cache refresh.
 */
export const v3GetTotalMinutes = <ThrowOnError extends boolean = false>(options?: Options<V3GetTotalMinutesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetTotalMinutesResponses, unknown, ThrowOnError>({
        responseTransformer: v3GetTotalMinutesResponseTransformer,
        url: '/v3/total-minutes',
        ...options
    });
};

/**
 * GithubCallback
 * Handle GitHub OAuth callback.
 *
 * This endpoint receives the authorization code from GitHub and redirects
 * to the frontend with user authentication information.
 */
export const v3GithubCallback = <ThrowOnError extends boolean = false>(options: Options<V3GithubCallbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GithubCallbackResponses, V3GithubCallbackErrors, ThrowOnError>({
        url: '/v3/auth/github',
        ...options
    });
};

/**
 * GoogleAuth
 * Handle Google OAuth authentication flow.
 *
 * This endpoint processes Google Sign-In credentials (JWT tokens)
 * and either creates a new user or logs in an existing user.
 */
export const v3GoogleAuth = <ThrowOnError extends boolean = false>(options: Options<V3GoogleAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3GoogleAuthResponses, V3GoogleAuthErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/v3/auth/google',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Logout
 * Log out the current user.
 *
 * Clears the user's session and removes authentication cookies.
 */
export const v3Logout = <ThrowOnError extends boolean = false>(options?: Options<V3LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<V3LogoutResponses, unknown, ThrowOnError>({
        url: '/v3/auth/logout',
        ...options
    });
};

/**
 * RefreshToken
 * Refresh user authentication tokens.
 *
 * Generates new upload_token and token_v1 for the authenticated user.
 */
export const v3RefreshToken = <ThrowOnError extends boolean = false>(options?: Options<V3RefreshTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<V3RefreshTokenResponses, unknown, ThrowOnError>({
        url: '/v3/auth/refresh-token',
        ...options
    });
};

/**
 * DeleteUserAccount
 * Delete the current user's account and all associated data.
 */
export const v3DeleteUserAccount = <ThrowOnError extends boolean = false>(options?: Options<V3DeleteUserAccountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<V3DeleteUserAccountResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self',
        ...options
    });
};

/**
 * GetUserSelf
 */
export const v3GetUserSelf = <ThrowOnError extends boolean = false>(options?: Options<V3GetUserSelfData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetUserSelfResponses, unknown, ThrowOnError>({
        responseTransformer: v3GetUserSelfResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self',
        ...options
    });
};

/**
 * DeleteUserData
 * Delete all user data but keep the account.
 */
export const v3DeleteUserData = <ThrowOnError extends boolean = false>(options?: Options<V3DeleteUserDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<V3DeleteUserDataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self/data',
        ...options
    });
};

/**
 * ExportUserData
 * Export user data directly as CSV file.
 */
export const v3ExportUserData = <ThrowOnError extends boolean = false>(options?: Options<V3ExportUserDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3ExportUserDataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self/export',
        ...options
    });
};

/**
 * GetPrivacySettings
 * Get current user's privacy settings.
 */
export const v3GetPrivacySettings = <ThrowOnError extends boolean = false>(options?: Options<V3GetPrivacySettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetPrivacySettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self/privacy',
        ...options
    });
};

/**
 * UpdatePrivacySettings
 * Update current user's privacy settings.
 */
export const v3UpdatePrivacySettings = <ThrowOnError extends boolean = false>(options: Options<V3UpdatePrivacySettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3UpdatePrivacySettingsResponses, V3UpdatePrivacySettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self/privacy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * GetSelfMinutes
 * Get user daily coding minutes for the specified time range.
 */
export const v3GetSelfMinutes = <ThrowOnError extends boolean = false>(options?: Options<V3GetSelfMinutesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetSelfMinutesResponses, V3GetSelfMinutesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self/minutes',
        ...options
    });
};

/**
 * GetTimeDistribution
 * Get user coding time distribution by hour and minute.
 */
export const v3GetTimeDistribution = <ThrowOnError extends boolean = false>(options?: Options<V3GetTimeDistributionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetTimeDistributionResponses, V3GetTimeDistributionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self/time-distribution',
        ...options
    });
};

/**
 * GetUserByUserId
 * Get user information filtered by privacy settings.
 *
 * Only users with DETAIL_PUBLIC privacy level can be accessed by external users.
 * Users with PRIVATE or STATS_PUBLIC levels will return 403 error unless accessing their own data.
 * Individual contact settings (show_email/show_github) control visibility of contact information.
 */
export const v3GetUserByUserId = <ThrowOnError extends boolean = false>(options: Options<V3GetUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GetUserByUserIdResponses, V3GetUserByUserIdErrors, ThrowOnError>({
        responseTransformer: v3GetUserByUserIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/{user_id}',
        ...options
    });
};

/**
 * GetUserShield
 * Get a shield with user's coding time information.
 *
 * Args:
 * session: The database session.
 * uid: The user ID.
 * minutes: Optional time range in minutes to filter by.
 * project: Optional project name to filter by.
 * language: Optional language to filter by. If provided, only statistics for this language will be counted.
 * only_hours: If True, the message will only show hours (e.g., '2h').
 *
 * Returns:
 * A ShieldResponse object with badge data.
 */
export const v3GetUserShield = <ThrowOnError extends boolean = false>(options: Options<V3GetUserShieldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GetUserShieldResponses, V3GetUserShieldErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/shield',
        ...options
    });
};

/**
 * GetWorkspaceFiles
 * Get file activities for a specific workspace/project.
 */
export const v3GetWorkspaceFiles = <ThrowOnError extends boolean = false>(options: Options<V3GetWorkspaceFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GetWorkspaceFilesResponses, V3GetWorkspaceFilesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self/workspace',
        ...options
    });
};

/**
 * ListSelfLatestLogs
 */
export const v3ListSelfLatestLogs = <ThrowOnError extends boolean = false>(options?: Options<V3ListSelfLatestLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3ListSelfLatestLogsResponses, V3ListSelfLatestLogsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self/latest-logs',
        ...options
    });
};

/**
 * ListSelfStats
 * Get user stats by field aggregated over time periods.
 */
export const v3ListSelfStats = <ThrowOnError extends boolean = false>(options: Options<V3ListSelfStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3ListSelfStatsResponses, V3ListSelfStatsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self/stats',
        ...options
    });
};

/**
 * ListSelfStatsTime
 * Get user stats by time unit only (no by field).
 */
export const v3ListSelfStatsTime = <ThrowOnError extends boolean = false>(options?: Options<V3ListSelfStatsTimeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3ListSelfStatsTimeResponses, V3ListSelfStatsTimeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self/stats_time',
        ...options
    });
};

/**
 * ListSelfTop
 * Get top N items for the given field with optional filtering by multiple criteria.
 */
export const v3ListSelfTop = <ThrowOnError extends boolean = false>(options: Options<V3ListSelfTopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3ListSelfTopResponses, V3ListSelfTopErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self/top',
        ...options
    });
};

/**
 * PostEventLog
 * Submit a single event log entry.
 */
export const v3PostEventLog = <ThrowOnError extends boolean = false>(options: Options<V3PostEventLogData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3PostEventLogResponses, V3PostEventLogErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/event-log',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * SearchWorkspaces
 * Search current user's unique workspace names.
 */
export const v3SearchWorkspaces = <ThrowOnError extends boolean = false>(options?: Options<V3SearchWorkspacesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3SearchWorkspacesResponses, V3SearchWorkspacesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/self/workspaces/search',
        ...options
    });
};

/**
 * GetYearlyReportData
 */
export const v3GetYearlyReportData = <ThrowOnError extends boolean = false>(options: Options<V3GetYearlyReportDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GetYearlyReportDataResponses, V3GetYearlyReportDataErrors, ThrowOnError>({
        url: '/v3/logs/yearly-report-data',
        ...options
    });
};

/**
 * CreateCheckout
 * Create a checkout session for the authenticated user.
 */
export const v3CreateCheckout = <ThrowOnError extends boolean = false>(options: Options<V3CreateCheckoutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3CreateCheckoutResponses, V3CreateCheckoutErrors, ThrowOnError>({
        responseTransformer: v3CreateCheckoutResponseTransformer,
        url: '/v3/payments/checkout',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * GetProducts
 * Get list of available products for purchase.
 */
export const v3GetProducts = <ThrowOnError extends boolean = false>(options?: Options<V3GetProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetProductsResponses, unknown, ThrowOnError>({
        url: '/v3/payments/products',
        ...options
    });
};

/**
 * HandleLemonsqueezyWebhook
 * Handle webhooks from LemonSqueezy for payment status updates.
 */
export const v3HandleLemonsqueezyWebhook = <ThrowOnError extends boolean = false>(options?: Options<V3HandleLemonsqueezyWebhookData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<V3HandleLemonsqueezyWebhookResponses, unknown, ThrowOnError>({
        url: '/v3/payments/webhooks/lemonsqueezy',
        ...options
    });
};

/**
 * GetLeaderboard
 * Get coding time leaderboard for public users.
 */
export const v3GetLeaderboard = <ThrowOnError extends boolean = false>(options?: Options<V3GetLeaderboardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetLeaderboardResponses, V3GetLeaderboardErrors, ThrowOnError>({
        responseTransformer: v3GetLeaderboardResponseTransformer,
        url: '/v3/public/leaderboard',
        ...options
    });
};

/**
 * GetTags
 * Get all tags for the current user
 */
export const v3GetTags = <ThrowOnError extends boolean = false>(options?: Options<V3GetTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetTagsResponses, unknown, ThrowOnError>({
        responseTransformer: v3GetTagsResponseTransformer,
        url: '/v3/tags',
        ...options
    });
};

/**
 * CreateTag
 * Create a new tag for the user
 */
export const v3CreateTag = <ThrowOnError extends boolean = false>(options: Options<V3CreateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3CreateTagResponses, V3CreateTagErrors, ThrowOnError>({
        responseTransformer: v3CreateTagResponseTransformer,
        url: '/v3/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * GetTagRules
 * Get all rules for a specific tag
 */
export const v3GetTagRules = <ThrowOnError extends boolean = false>(options: Options<V3GetTagRulesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GetTagRulesResponses, V3GetTagRulesErrors, ThrowOnError>({
        responseTransformer: v3GetTagRulesResponseTransformer,
        url: '/v3/tags/{tag_id}/rules',
        ...options
    });
};

/**
 * CreateTagRule
 * Create a new rule for a tag
 */
export const v3CreateTagRule = <ThrowOnError extends boolean = false>(options: Options<V3CreateTagRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3CreateTagRuleResponses, V3CreateTagRuleErrors, ThrowOnError>({
        responseTransformer: v3CreateTagRuleResponseTransformer,
        url: '/v3/tags/{tag_id}/rules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * DeleteRule
 * Delete a rule
 */
export const v3DeleteRule = <ThrowOnError extends boolean = false>(options: Options<V3DeleteRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<V3DeleteRuleResponses, V3DeleteRuleErrors, ThrowOnError>({
        url: '/v3/tags/rules/{rule_id}',
        ...options
    });
};

/**
 * GetRule
 * Get a specific rule by ID
 */
export const v3GetRule = <ThrowOnError extends boolean = false>(options: Options<V3GetRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GetRuleResponses, V3GetRuleErrors, ThrowOnError>({
        responseTransformer: v3GetRuleResponseTransformer,
        url: '/v3/tags/rules/{rule_id}',
        ...options
    });
};

/**
 * UpdateRule
 * Update a rule's properties and conditions
 */
export const v3UpdateRule = <ThrowOnError extends boolean = false>(options: Options<V3UpdateRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<V3UpdateRuleResponses, V3UpdateRuleErrors, ThrowOnError>({
        responseTransformer: v3UpdateRuleResponseTransformer,
        url: '/v3/tags/rules/{rule_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * DeleteTag
 * Delete a tag and all its rules
 */
export const v3DeleteTag = <ThrowOnError extends boolean = false>(options: Options<V3DeleteTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<V3DeleteTagResponses, V3DeleteTagErrors, ThrowOnError>({
        url: '/v3/tags/{tag_id}',
        ...options
    });
};

/**
 * GetTag
 * Get a specific tag by ID
 */
export const v3GetTag = <ThrowOnError extends boolean = false>(options: Options<V3GetTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GetTagResponses, V3GetTagErrors, ThrowOnError>({
        responseTransformer: v3GetTagResponseTransformer,
        url: '/v3/tags/{tag_id}',
        ...options
    });
};

/**
 * UpdateTag
 * Update a tag's properties
 */
export const v3UpdateTag = <ThrowOnError extends boolean = false>(options: Options<V3UpdateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<V3UpdateTagResponses, V3UpdateTagErrors, ThrowOnError>({
        responseTransformer: v3UpdateTagResponseTransformer,
        url: '/v3/tags/{tag_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * EvaluateWorkspaceTags
 * Evaluate which tags match the given workspace data
 */
export const v3EvaluateWorkspaceTags = <ThrowOnError extends boolean = false>(options: Options<V3EvaluateWorkspaceTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3EvaluateWorkspaceTagsResponses, V3EvaluateWorkspaceTagsErrors, ThrowOnError>({
        responseTransformer: v3EvaluateWorkspaceTagsResponseTransformer,
        url: '/v3/tags/evaluate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * GetAllTagsHistory
 * Get historical time data for all user tags with time grouping options
 */
export const v3GetAllTagsHistory = <ThrowOnError extends boolean = false>(options?: Options<V3GetAllTagsHistoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetAllTagsHistoryResponses, V3GetAllTagsHistoryErrors, ThrowOnError>({
        responseTransformer: v3GetAllTagsHistoryResponseTransformer,
        url: '/v3/tags/history',
        ...options
    });
};

/**
 * GetTagHistory
 * Get historical time data for a specific tag with time grouping options
 */
export const v3GetTagHistory = <ThrowOnError extends boolean = false>(options: Options<V3GetTagHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<V3GetTagHistoryResponses, V3GetTagHistoryErrors, ThrowOnError>({
        responseTransformer: v3GetTagHistoryResponseTransformer,
        url: '/v3/tags/{tag_id}/history',
        ...options
    });
};

/**
 * GetTagTimeStats
 * Get time statistics for user's tags within a specified period
 */
export const v3GetTagTimeStats = <ThrowOnError extends boolean = false>(options?: Options<V3GetTagTimeStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetTagTimeStatsResponses, V3GetTagTimeStatsErrors, ThrowOnError>({
        responseTransformer: v3GetTagTimeStatsResponseTransformer,
        url: '/v3/tags/stats',
        ...options
    });
};

/**
 * Generate iCalendar feed
 * Generate an iCalendar (.ics) feed of coding activity for calendar applications
 */
export const v3GetCalendarFeed = <ThrowOnError extends boolean = false>(options?: Options<V3GetCalendarFeedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetCalendarFeedResponses, V3GetCalendarFeedErrors, ThrowOnError>({
        url: '/v3/icalendar/feed.ics',
        ...options
    });
};

/**
 * Calendar feed information
 * Get information about available options for the iCalendar feed
 */
export const v3GetCalendarInfo = <ThrowOnError extends boolean = false>(options?: Options<V3GetCalendarInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<V3GetCalendarInfoResponses, unknown, ThrowOnError>({
        url: '/v3/icalendar/info',
        ...options
    });
};

/**
 * BeAnyUser
 * This endpoint is for testing purposes only. It allows you to impersonate any user.
 */
export const v3BeAnyUser = <ThrowOnError extends boolean = false>(options: Options<V3BeAnyUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<V3BeAnyUserResponses, V3BeAnyUserErrors, ThrowOnError>({
        url: '/v3/dev/be',
        ...options
    });
};